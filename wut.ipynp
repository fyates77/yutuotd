{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Excel Model Emulator\n",
    "\n",
    "This notebook provides functionality to emulate Excel-based models by:\n",
    "- Reading Excel files\n",
    "- Taking input variables\n",
    "- Processing calculations\n",
    "- Returning output variables\n",
    "\n",
    "## Setup and Dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install required packages if not already installed\n",
    "!pip install pandas openpyxl xlrd numpy matplotlib seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from typing import Dict, List, Any, Optional, Union\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set display options\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', 100)\n",
    "pd.set_option('display.width', None)\n",
    "\n",
    "print(\"Dependencies loaded successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Excel Model Emulator Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ExcelModelEmulator:\n",
    "    \"\"\"\n",
    "    A class to emulate Excel-based models by reading Excel files and processing calculations.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, excel_file_path: str):\n",
    "        \"\"\"\n",
    "        Initialize the emulator with an Excel file path.\n",
    "        \n",
    "        Args:\n",
    "            excel_file_path (str): Path to the Excel file\n",
    "        \"\"\"\n",
    "        self.excel_file_path = excel_file_path\n",
    "        self.sheets = {}\n",
    "        self.input_variables = {}\n",
    "        self.output_variables = {}\n",
    "        self.calculations = {}\n",
    "        self.load_excel_file()\n",
    "    \n",
    "    def load_excel_file(self):\n",
    "        \"\"\"Load all sheets from the Excel file.\"\"\"\n",
    "        try:\n",
    "            # Read all sheets\n",
    "            excel_file = pd.ExcelFile(self.excel_file_path)\n",
    "            \n",
    "            for sheet_name in excel_file.sheet_names:\n",
    "                self.sheets[sheet_name] = pd.read_excel(\n",
    "                    self.excel_file_path, \n",
    "                    sheet_name=sheet_name,\n",
    "                    header=None,\n",
    "                    na_values=['', 'NA', 'N/A']\n",
    "                )\n",
    "            \n",
    "            print(f\"Successfully loaded {len(self.sheets)} sheets: {list(self.sheets.keys())}\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"Error loading Excel file: {e}\")\n",
    "    \n",
    "    def set_input_variables(self, variables: Dict[str, Any]):\n",
    "        \"\"\"\n",
    "        Set input variables for the model.\n",
    "        \n",
    "        Args:\n",
    "            variables (Dict[str, Any]): Dictionary of variable names and values\n",
    "        \"\"\"\n",
    "        self.input_variables.update(variables)\n",
    "        print(f\"Input variables set: {list(variables.keys())}\")\n",
    "    \n",
    "    def get_cell_value(self, sheet_name: str, row: int, col: int) -> Any:\n",
    "        \"\"\"\n",
    "        Get value from a specific cell in a sheet.\n",
    "        \n",
    "        Args:\n",
    "            sheet_name (str): Name of the sheet\n",
    "            row (int): Row index (0-based)\n",
    "            col (int): Column index (0-based)\n",
    "            \n",
    "        Returns:\n",
    "            Any: Cell value\n",
    "        \"\"\"\n",
    "        if sheet_name in self.sheets:\n",
    "            if row < len(self.sheets[sheet_name]) and col < len(self.sheets[sheet_name].columns):\n",
    "                return self.sheets[sheet_name].iloc[row, col]\n",
    "        return None\n",
    "    \n",
    "    def find_cell_by_value(self, sheet_name: str, value: Any) -> Optional[tuple]:\n",
    "        \"\"\"\n",
    "        Find cell coordinates by searching for a specific value.\n",
    "        \n",
    "        Args:\n",
    "            sheet_name (str): Name of the sheet\n",
    "            value (Any): Value to search for\n",
    "            \n",
    "        Returns:\n",
    "            Optional[tuple]: (row, col) coordinates or None if not found\n",
    "        \"\"\"\n",
    "        if sheet_name not in self.sheets:\n",
    "            return None\n",
    "        \n",
    "        df = self.sheets[sheet_name]\n",
    "        for row_idx in range(len(df)):\n",
    "            for col_idx in range(len(df.columns)):\n",
    "                if df.iloc[row_idx, col_idx] == value:\n",
    "                    return (row_idx, col_idx)\n",
    "        return None\n",
    "    \n",
    "    def extract_table(self, sheet_name: str, start_row: int, start_col: int, \n",
    "                     end_row: int, end_col: int) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Extract a table from a sheet.\n",
    "        \n",
    "        Args:\n",
    "            sheet_name (str): Name of the sheet\n",
    "            start_row (int): Starting row index\n",
    "            start_col (int): Starting column index\n",
    "            end_row (int): Ending row index\n",
    "            end_col (int): Ending column index\n",
    "            \n",
    "        Returns:\n",
    "            pd.DataFrame: Extracted table\n",
    "        \"\"\"\n",
    "        if sheet_name in self.sheets:\n",
    "            return self.sheets[sheet_name].iloc[start_row:end_row+1, start_col:end_col+1]\n",
    "        return pd.DataFrame()\n",
    "    \n",
    "    def add_calculation(self, name: str, calculation_func):\n",
    "        \"\"\"\n",
    "        Add a custom calculation function.\n",
    "        \n",
    "        Args:\n",
    "            name (str): Name of the calculation\n",
    "            calculation_func: Function that performs the calculation\n",
    "        \"\"\"\n",
    "        self.calculations[name] = calculation_func\n",
    "        print(f\"Added calculation: {name}\")\n",
    "    \n",
    "    def run_calculation(self, name: str, *args, **kwargs) -> Any:\n",
    "        \"\"\"\n",
    "        Run a specific calculation.\n",
    "        \n",
    "        Args:\n",
    "            name (str): Name of the calculation to run\n",
    "            *args, **kwargs: Arguments for the calculation function\n",
    "            \n",
    "        Returns:\n",
    "            Any: Result of the calculation\n",
    "        \"\"\"\n",
    "        if name in self.calculations:\n",
    "            return self.calculations[name](*args, **kwargs)\n",
    "        else:\n",
    "            print(f\"Calculation '{name}' not found\")\n",
    "            return None\n",
    "    \n",
    "    def get_output_variables(self) -> Dict[str, Any]:\n",
    "        \"\"\"\n",
    "        Get all output variables.\n",
    "        \n",
    "        Returns:\n",
    "            Dict[str, Any]: Dictionary of output variables\n",
    "        \"\"\"\n",
    "        return self.output_variables.copy()\n",
    "    \n",
    "    def set_output_variable(self, name: str, value: Any):\n",
    "        \"\"\"\n",
    "        Set an output variable.\n",
    "        \n",
    "        Args:\n",
    "            name (str): Name of the output variable\n",
    "            value (Any): Value of the output variable\n",
    "        \"\"\"\n",
    "        self.output_variables[name] = value\n",
    "    \n",
    "    def display_sheet_info(self, sheet_name: str = None):\n",
    "        \"\"\"\n",
    "        Display information about sheets.\n",
    "        \n",
    "        Args:\n",
    "            sheet_name (str, optional): Specific sheet to display. If None, shows all sheets.\n",
    "        \"\"\"\n",
    "        if sheet_name:\n",
    "            if sheet_name in self.sheets:\n",
    "                print(f\"\\nSheet: {sheet_name}\")\n",
    "                print(f\"Shape: {self.sheets[sheet_name].shape}\")\n",
    "                print(\"First few rows:\")\n",
    "                print(self.sheets[sheet_name].head())\n",
    "            else:\n",
    "                print(f\"Sheet '{sheet_name}' not found\")\n",
    "        else:\n",
    "            for name, df in self.sheets.items():\n",
    "                print(f\"\\nSheet: {name}\")\n",
    "                print(f\"Shape: {df.shape}\")\n",
    "                print(\"First few rows:\")\n",
    "                print(df.head())\n",
    "    \n",
    "    def save_results_to_excel(self, output_file: str):\n",
    "        \"\"\"\n",
    "        Save results to a new Excel file.\n",
    "        \n",
    "        Args:\n",
    "            output_file (str): Path to the output Excel file\n",
    "        \"\"\"\n",
    "        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n",
    "            # Save input variables\n",
    "            input_df = pd.DataFrame(list(self.input_variables.items()), \n",
    "                                   columns=['Variable', 'Value'])\n",
    "            input_df.to_excel(writer, sheet_name='Input_Variables', index=False)\n",
    "            \n",
    "            # Save output variables\n",
    "            output_df = pd.DataFrame(list(self.output_variables.items()), \n",
    "                                    columns=['Variable', 'Value'])\n",
    "            output_df.to_excel(writer, sheet_name='Output_Variables', index=False)\n",
    "            \n",
    "            # Save original sheets\n",
    "            for sheet_name, df in self.sheets.items():\n",
    "                df.to_excel(writer, sheet_name=f'Original_{sheet_name}', index=False, header=False)\n",
    "        \n",
    "        print(f\"Results saved to {output_file}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example Usage\n",
    "\n",
    "Below are examples of how to use the Excel Model Emulator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 1: Basic usage with a sample Excel file\n",
    "# Replace 'your_model.xlsx' with your actual Excel file path\n",
    "\n",
    "# Initialize the emulator\n",
    "# emulator = ExcelModelEmulator('your_model.xlsx')\n",
    "\n",
    "# Set input variables\n",
    "# emulator.set_input_variables({\n",
    "#     'revenue_growth_rate': 0.05,\n",
    "#     'cost_margin': 0.65,\n",
    "#     'tax_rate': 0.25,\n",
    "#     'initial_investment': 1000000\n",
    "# })\n",
    "\n",
    "# Display sheet information\n",
    "# emulator.display_sheet_info()\n",
    "\n",
    "print(\"Example code provided. Uncomment and modify for your specific Excel file.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Advanced Example: Financial Model Emulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FinancialModelEmulator(ExcelModelEmulator):\n",
    "    \"\"\"\n",
    "    Specialized emulator for financial models.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, excel_file_path: str):\n",
    "        super().__init__(excel_file_path)\n",
    "        self.setup_financial_calculations()\n",
    "    \n",
    "    def setup_financial_calculations(self):\n",
    "        \"\"\"Setup common financial calculations.\"\"\"\n",
    "        \n",
    "        # NPV calculation\n",
    "        def calculate_npv(cash_flows, discount_rate):\n",
    "            \"\"\"Calculate Net Present Value.\"\"\"\n",
    "            npv = 0\n",
    "            for i, cf in enumerate(cash_flows):\n",
    "                npv += cf / ((1 + discount_rate) ** i)\n",
    "            return npv\n",
    "        \n",
    "        # IRR calculation (simplified)\n",
    "        def calculate_irr(cash_flows, guess=0.1):\n",
    "            \"\"\"Calculate Internal Rate of Return (simplified version).\"\"\"\n",
    "            def npv_function(rate):\n",
    "                return sum(cf / ((1 + rate) ** i) for i, cf in enumerate(cash_flows))\n",
    "            \n",
    "            # Simple iterative approach\n",
    "            rate = guess\n",
    "            for _ in range(100):\n",
    "                npv = npv_function(rate)\n",
    "                if abs(npv) < 1e-6:\n",
    "                    return rate\n",
    "                # Simple adjustment\n",
    "                rate = rate - npv / 1000\n",
    "            return rate\n",
    "        \n",
    "        # Payback period\n",
    "        def calculate_payback(cash_flows, initial_investment):\n",
    "            \"\"\"Calculate payback period.\"\"\"\n",
    "            cumulative = -initial_investment\n",
    "            for i, cf in enumerate(cash_flows):\n",
    "                cumulative += cf\n",
    "                if cumulative >= 0:\n",
    "                    return i + 1\n",
    "            return None\n",
    "        \n",
    "        self.add_calculation('npv', calculate_npv)\n",
    "        self.add_calculation('irr', calculate_irr)\n",
    "        self.add_calculation('payback', calculate_payback)\n",
    "    \n",
    "    def run_financial_analysis(self, cash_flows: List[float], \n",
    "                              discount_rate: float = 0.1, \n",
    "                              initial_investment: float = 0) -> Dict[str, float]:\n",
    "        \"\"\"\n",
    "        Run comprehensive financial analysis.\n",
    "        \n",
    "        Args:\n",
    "            cash_flows (List[float]): List of cash flows\n",
    "            discount_rate (float): Discount rate for NPV\n",
    "            initial_investment (float): Initial investment amount\n",
    "            \n",
    "        Returns:\n",
    "            Dict[str, float]: Dictionary of financial metrics\n",
    "        \"\"\"\n",
    "        results = {}\n",
    "        \n",
    "        # Calculate NPV\n",
    "        results['npv'] = self.run_calculation('npv', cash_flows, discount_rate)\n",
    "        \n",
    "        # Calculate IRR\n",
    "        results['irr'] = self.run_calculation('irr', cash_flows)\n",
    "        \n",
    "        # Calculate payback period\n",
    "        results['payback_period'] = self.run_calculation('payback', cash_flows, initial_investment)\n",
    "        \n",
    "        # Additional metrics\n",
    "        results['total_cash_flow'] = sum(cash_flows)\n",
    "        results['avg_cash_flow'] = np.mean(cash_flows)\n",
    "        results['cash_flow_volatility'] = np.std(cash_flows)\n",
    "        \n",
    "        # Store results as output variables\n",
    "        for key, value in results.items():\n",
    "            self.set_output_variable(key, value)\n",
    "        \n",
    "        return results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Using the Financial Model Emulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example financial analysis\n",
    "def run_example_financial_analysis():\n",
    "    \"\"\"Run an example financial analysis.\"\"\"\n",
    "    \n",
    "    # Sample cash flows (5-year project)\n",
    "    cash_flows = [-1000000, 200000, 300000, 400000, 500000, 600000]\n",
    "    \n",
    "    # Create emulator (you would use your actual Excel file)\n",
    "    # financial_emulator = FinancialModelEmulator('your_financial_model.xlsx')\n",
    "    \n",
    "    # For demonstration, we'll create a simple emulator without Excel file\n",
    "    class DemoFinancialEmulator(FinancialModelEmulator):\n",
    "        def __init__(self):\n",
    "            self.input_variables = {}\n",
    "            self.output_variables = {}\n",
    "            self.calculations = {}\n",
    "            self.setup_financial_calculations()\n",
    "    \n",
    "    financial_emulator = DemoFinancialEmulator()\n",
    "    \n",
    "    # Set input variables\n",
    "    financial_emulator.set_input_variables({\n",
    "        'initial_investment': 1000000,\n",
    "        'discount_rate': 0.1,\n",
    "        'project_duration': 5\n",
    "    })\n",
    "    \n",
    "    # Run analysis\n",
    "    results = financial_emulator.run_financial_analysis(\n",
    "        cash_flows=cash_flows,\n",
    "        discount_rate=0.1,\n",
    "        initial_investment=1000000\n",
    "    )\n",
    "    \n",
    "    # Display results\n",
    "    print(\"Financial Analysis Results:\")\n",
    "    print(\"=\" * 40)\n",
    "    for metric, value in results.items():\n",
    "        if isinstance(value, float):\n",
    "            print(f\"{metric.replace('_', ' ').title()}: ${value:,.2f}\")\n",
    "        else:\n",
    "            print(f\"{metric.replace('_', ' ').title()}: {value}\")\n",
    "    \n",
    "    return results\n",
    "\n",
    "# Run the example\n",
    "example_results = run_example_financial_analysis()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_cash_flows(cash_flows: List[float], title: str = \"Cash Flow Analysis\"):\n",
    "    \"\"\"Plot cash flows over time.\"\"\"\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    \n",
    "    # Create time periods\n",
    "    periods = list(range(len(cash_flows)))\n",
    "    \n",
    "    # Plot cash flows\n",
    "    plt.subplot(1, 2, 1)\n",
    "    bars = plt.bar(periods, cash_flows, color=['red' if cf < 0 else 'green' for cf in cash_flows])\n",
    "    plt.title('Cash Flows by Period')\n",
    "    plt.xlabel('Period')\n",
    "    plt.ylabel('Cash Flow ($)')\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    # Add value labels on bars\n",
    "    for bar, cf in zip(bars, cash_flows):\n",
    "        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + (10000 if cf > 0 else -10000),\n",
    "                f'${cf:,.0f}', ha='center', va='bottom' if cf > 0 else 'top')\n",
    "    \n",
    "    # Plot cumulative cash flows\n",
    "    plt.subplot(1, 2, 2)\n",
    "    cumulative = np.cumsum(cash_flows)\n",
    "    plt.plot(periods, cumulative, 'b-o', linewidth=2, markersize=8)\n",
    "    plt.axhline(y=0, color='r', linestyle='--', alpha=0.7)\n",
    "    plt.title('Cumulative Cash Flows')\n",
    "    plt.xlabel('Period')\n",
    "    plt.ylabel('Cumulative Cash Flow ($)')\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def plot_sensitivity_analysis(base_cash_flows: List[float], \n",
    "                             discount_rates: List[float], \n",
    "                             title: str = \"NPV Sensitivity Analysis\"):\n",
    "    \"\"\"Plot NPV sensitivity to discount rate changes.\"\"\"\n",
    "    npv_values = []\n",
    "    \n",
    "    for rate in discount_rates:\n",
    "        npv = sum(cf / ((1 + rate) ** i) for i, cf in enumerate(base_cash_flows))\n",
    "        npv_values.append(npv)\n",
    "    \n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(discount_rates, npv_values, 'b-o', linewidth=2, markersize=8)\n",
    "    plt.axhline(y=0, color='r', linestyle='--', alpha=0.7)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Discount Rate')\n",
    "    plt.ylabel('NPV ($)')\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    # Add value labels\n",
    "    for rate, npv in zip(discount_rates, npv_values):\n",
    "        plt.text(rate, npv + 50000, f'${npv:,.0f}', ha='center', va='bottom')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example usage of visualization functions\n",
    "if 'example_results' in locals():\n",
    "    # Plot cash flows from the example\n",
    "    cash_flows = [-1000000, 200000, 300000, 400000, 500000, 600000]\n",
    "    plot_cash_flows(cash_flows)\n",
    "    \n",
    "    # Plot sensitivity analysis\n",
    "    discount_rates = [0.05, 0.08, 0.10, 0.12, 0.15, 0.18, 0.20]\n",
    "    plot_sensitivity_analysis(cash_flows, discount_rates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Template for Your Specific Excel Model\n",
    "\n",
    "Below is a template you can customize for your specific Excel model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomModelEmulator(ExcelModelEmulator):\n",
    "    \"\"\"\n",
    "    Custom emulator for your specific Excel model.\n",
    "    Modify this class according to your model's structure.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, excel_file_path: str):\n",
    "        super().__init__(excel_file_path)\n",
    "        self.setup_custom_calculations()\n",
    "    \n",
    "    def setup_custom_calculations(self):\n",
    "        \"\"\"Setup calculations specific to your model.\"\"\"\n",
    "        \n",
    "        # Example: Revenue calculation\n",
    "        def calculate_revenue(units_sold, price_per_unit):\n",
    "            return units_sold * price_per_unit\n",
    "        \n",
    "        # Example: Cost calculation\n",
    "        def calculate_total_cost(fixed_costs, variable_costs_per_unit, units):\n",
    "            return fixed_costs + (variable_costs_per_unit * units)\n",
    "        \n",
    "        # Example: Profit calculation\n",
    "        def calculate_profit(revenue, total_costs):\n",
    "            return revenue - total_costs\n",
    "        \n",
    "        # Add your custom calculations here\n",
    "        self.add_calculation('revenue', calculate_revenue)\n",
    "        self.add_calculation('total_cost', calculate_total_cost)\n",
    "        self.add_calculation('profit', calculate_profit)\n",
    "    \n",
    "    def run_model(self, input_params: Dict[str, Any]) -> Dict[str, Any]:\n",
    "        \"\"\"\n",
    "        Run your complete model with given input parameters.\n",
    "        \n",
    "        Args:\n",
    "            input_params (Dict[str, Any]): Input parameters for the model\n",
    "            \n",
    "        Returns:\n",
    "            Dict[str, Any]: Model outputs\n",
    "        \"\"\"\n",
    "        # Set input variables\n",
    "        self.set_input_variables(input_params)\n",
    "        \n",
    "        # Extract values from Excel sheets if needed\n",
    "        # Example: Get values from specific cells\n",
    "        # base_price = self.get_cell_value('Assumptions', 5, 2)\n",
    "        # growth_rate = self.get_cell_value('Assumptions', 6, 2)\n",
    "        \n",
    "        # Run calculations\n",
    "        results = {}\n",
    "        \n",
    "        # Example calculations (modify based on your model)\n",
    "        units = input_params.get('units_sold', 1000)\n",
    "        price = input_params.get('price_per_unit', 50)\n",
    "        fixed_costs = input_params.get('fixed_costs', 10000)\n",
    "        variable_costs = input_params.get('variable_costs_per_unit', 20)\n",
    "        \n",
    "        revenue = self.run_calculation('revenue', units, price)\n",
    "        total_cost = self.run_calculation('total_cost', fixed_costs, variable_costs, units)\n",
    "        profit = self.run_calculation('profit', revenue, total_cost)\n",
    "        \n",
    "        results['revenue'] = revenue\n",
    "        results['total_cost'] = total_cost\n",
    "        results['profit'] = profit\n",
    "        results['profit_margin'] = profit / revenue if revenue > 0 else 0\n",
    "        \n",
    "        # Store results as output variables\n",
    "        for key, value in results.items():\n",
    "            self.set_output_variable(key, value)\n",
    "        \n",
    "        return results\n",
    "\n",
    "# Example usage of custom model\n",
    "def run_custom_model_example():\n",
    "    \"\"\"Example of using the custom model emulator.\"\"\"\n",
    "    \n",
    "    # Initialize emulator (replace with your Excel file)\n",
    "    # custom_emulator = CustomModelEmulator('your_model.xlsx')\n",
    "    \n",
    "    # For demonstration, create a simple version\n",
    "    class DemoCustomEmulator(CustomModelEmulator):\n",
    "        def __init__(self):\n",
    "            self.input_variables = {}\n",
    "            self.output_variables = {}\n",
    "            self.calculations = {}\n",
    "            self.setup_custom_calculations()\n",
    "    \n",
    "    custom_emulator = DemoCustomEmulator()\n",
    "    \n",
    "    # Define input parameters\n",
    "    input_params = {\n",
    "        'units_sold': 1500,\n",
    "        'price_per_unit': 75,\n",
    "        'fixed_costs': 15000,\n",
    "        'variable_costs_per_unit': 25\n",
    "    }\n",
    "    \n",
    "    # Run model\n",
    "    results = custom_emulator.run_model(input_params)\n",
    "    \n",
    "    # Display results\n",
    "    print(\"Custom Model Results:\")\n",
    "    print(\"=\" * 30)\n",
    "    for metric, value in results.items():\n",
    "        if isinstance(value, float):\n",
    "            print(f\"{metric.replace('_', ' ').title()}: ${value:,.2f}\")\n",
    "        else:\n",
    "            print(f\"{metric.replace('_', ' ').title()}: {value}\")\n",
    "    \n",
    "    return results\n",
    "\n",
    "# Run the custom model example\n",
    "custom_results = run_custom_model_example()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Usage Instructions\n",
    "\n",
    "1. **Replace the Excel file path**: Update `'your_model.xlsx'` with the path to your actual Excel file.\n",
    "\n",
    "2. **Customize the model class**: Modify the `CustomModelEmulator` class to match your Excel model's structure:\n",
    "   - Add specific calculations in `setup_custom_calculations()`\n",
    "   - Modify `run_model()` to implement your model's logic\n",
    "   - Use `get_cell_value()` to read specific cells from your Excel sheets\n",
    "   - Use `find_cell_by_value()` to locate cells by their content\n",
    "\n",
    "3. **Define input variables**: Set the input parameters your model requires.\n",
    "\n",
    "4. **Run the model**: Call the appropriate methods to execute your model and get results.\n",
    "\n",
    "5. **Visualize results**: Use the provided plotting functions or create your own visualizations.\n",
    "\n",
    "## Key Features\n",
    "\n",
    "- **Excel file reading**: Loads all sheets from your Excel file\n",
    "- **Cell access**: Read specific cells or find cells by value\n",
    "- **Custom calculations**: Add your own calculation functions\n",
    "- **Input/Output management**: Handle input variables and output results\n",
    "- **Visualization**: Built-in plotting functions for analysis\n",
    "- **Results export**: Save results back to Excel format\n",
    "\n",
    "This emulator provides a flexible framework that you can adapt to any Excel-based model by customizing the calculations and model logic."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
