{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Excel Model Emulator\n",
    "\n",
    "This notebook provides functionality to emulate Excel-based models by:\n",
    "- Reading Excel files\n",
    "- Taking input variables\n",
    "- Processing calculations\n",
    "- Returning output variables\n",
    "\n",
    "## Setup and Dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install required packages if not already installed\n",
    "!pip install pandas openpyxl xlrd numpy matplotlib seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from typing import Dict, List, Any, Optional, Union\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set display options\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', 100)\n",
    "pd.set_option('display.width', None)\n",
    "\n",
    "print(\"Dependencies loaded successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Excel Model Emulator Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ExcelModelEmulator:\n",
    "    \"\"\"\n",
    "    A class to emulate Excel-based models by reading Excel files and processing calculations.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, excel_file_path: str):\n",
    "        \"\"\"\n",
    "        Initialize the emulator with an Excel file path.\n",
    "        \n",
    "        Args:\n",
    "            excel_file_path (str): Path to the Excel file\n",
    "        \"\"\"\n",
    "        self.excel_file_path = excel_file_path\n",
    "        self.sheets = {}\n",
    "        self.input_variables = {}\n",
    "        self.output_variables = {}\n",
    "        self.calculations = {}\n",
    "        self.load_excel_file()\n",
    "    \n",
    "    def load_excel_file(self):\n",
    "        \"\"\"Load all sheets from the Excel file.\"\"\"\n",
    "        try:\n",
    "            # Read all sheets\n",
    "            excel_file = pd.ExcelFile(self.excel_file_path)\n",
    "            \n",
    "            for sheet_name in excel_file.sheet_names:\n",
    "                self.sheets[sheet_name] = pd.read_excel(\n",
    "                    self.excel_file_path, \n",
    "                    sheet_name=sheet_name,\n",
    "                    header=None,\n",
    "                    na_values=['', 'NA', 'N/A']\n",
    "                )\n",
    "            \n",
    "            print(f\"Successfully loaded {len(self.sheets)} sheets: {list(self.sheets.keys())}\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"Error loading Excel file: {e}\")\n",
    "    \n",
    "    def set_input_variables(self, variables: Dict[str, Any]):\n",
    "        \"\"\"\n",
    "        Set input variables for the model.\n",
    "        \n",
    "        Args:\n",
    "            variables (Dict[str, Any]): Dictionary of variable names and values\n",
    "        \"\"\"\n",
    "        self.input_variables.update(variables)\n",
    "        print(f\"Input variables set: {list(variables.keys())}\")\n",
    "    \n",
    "    def get_cell_value(self, sheet_name: str, row: int, col: int) -> Any:\n",
    "        \"\"\"\n",
    "        Get value from a specific cell in a sheet.\n",
    "        \n",
    "        Args:\n",
    "            sheet_name (str): Name of the sheet\n",
    "            row (int): Row index (0-based)\n",
    "            col (int): Column index (0-based)\n",
    "            \n",
    "        Returns:\n",
    "            Any: Cell value\n",
  
